/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useEffect, useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'

// @ts-ignore
import vertex from "../../src/shaders/vertex.glsl";
// @ts-ignore
import fragment from "../../src/shaders/fragment.glsl"
import { ShaderMaterial } from 'three';

import { OrbitControls } from "three/examples/jsm/controls/OrbitControls";
import { useFrame, useThree } from '@react-three/fiber';

type GLTFResult = GLTF & {
  nodes: {}
  materials: {}
}

export default function Model(props: JSX.IntrinsicElements['group']) {
  //Main hooks
  const group = useRef<THREE.Group>()
  const { nodes, materials } = useGLTF('/models/compressed2.glb') as GLTFResult;
  const { camera, gl } = useThree();
  const myRef = useRef();

  //Basic Material
  const shaderMaterial = new ShaderMaterial(
    {
      uniforms : {
        time: {value : 0}
      },
      vertexShader:vertex,
      fragmentShader:fragment,
      wireframe:true
    });

    //runs every time the html it's rendered
    useFrame(({clock})=>{
      // @ts-ignore
      myRef.current.material.uniforms.time.value = clock.getElapsedTime();
    });

    //Get meshes from nodes
    // @ts-ignore
    const meshes: THREE.Mesh[] = Object.values(nodes).filter((m)=> m.geometry != undefined);

    //first mesh created manually so i can put a ref
    const firstMesh = meshes.shift();
    const meshesElements = meshes.map((m)=>{return <mesh key={m.id} geometry={m.geometry} material={shaderMaterial} />});

    useEffect(
      () => {
        const controls = new OrbitControls(camera, gl.domElement);
      }
    );

  return (
    <group ref={group} {...props} dispose={null}>
      <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
        <mesh ref={myRef} geometry={firstMesh?.geometry} material={shaderMaterial} />
        {meshesElements}
      </group>
    </group>
  )
}

useGLTF.preload('/models/compressed2.glb')
