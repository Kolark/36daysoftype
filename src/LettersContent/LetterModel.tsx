/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three/examples/jsm/loaders/GLTFLoader";

import { DoubleSide, ShaderMaterial } from "three";

import { OrbitControls } from "three/examples/jsm/controls/OrbitControls";
import { useFrame, useThree } from "@react-three/fiber";

type GLTFResult = GLTF & {
    nodes: {};
    materials: {};
};

type ModelProps = {
    groups: JSX.IntrinsicElements["group"];
    vertexShader: string;
    fragmentShader: string;
    model: string;
    offset:number[];
    scale:number;
};

export default function Model(props: ModelProps) {
    //Main hooks
    useGLTF.preload("/gltfCompressed/" + props.model);
    const group = useRef<THREE.Group>();
    const { nodes, materials } = useGLTF("/gltfCompressed/" + props.model ) as GLTFResult;
    // const { camera, gl } = useThree();
    const myRef = useRef();

    //Basic Material
    const shaderMaterial = new ShaderMaterial({
        uniforms: {
            time: { value: 0 },
        },
        vertexShader: props.vertexShader,
        fragmentShader: props.fragmentShader,
        side: THREE.DoubleSide,
        // wireframe:true
    });

    //runs every time the html it's rendered
    useFrame(({ clock }) => {
        // @ts-ignore
        myRef.current.material.uniforms.time.value = clock.getElapsedTime();
    });


    //Get meshes from nodes
    // @ts-ignore
    const meshes: THREE.Mesh[] = Object.values(nodes).filter(
        (m:any) => m.geometry != undefined
    );

    //first mesh created manually so i can put a ref
    const firstMesh = meshes.shift();
    const meshesElements = meshes.map((m) => {
        return (
            <mesh key={m.id} geometry={m.geometry} material={shaderMaterial} />
        );
    });

    return (
        <group ref={group} {...props.groups} dispose={null}>
            <group
                position={[-0.75 + props.offset[0], -0.75 + props.offset[1], 0 + props.offset[2]]}
                rotation={[Math.PI / 2, 0, 0]}
                scale={0.01*props.scale}
            >
                <mesh
                    ref={myRef}
                    geometry={firstMesh?.geometry}
                    material={shaderMaterial}
                />
                {meshesElements}
            </group>
        </group>
    );
}
